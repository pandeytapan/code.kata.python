#!/usr/bin/env python3
from argparse import ArgumentParser
from contextlib import contextmanager
import glob
import os
import re
import shutil
import subprocess
import sys
from time import perf_counter


TEST_FILENAME_RE = re.compile(r'^ test_ (.+) \. py $', flags=re.VERBOSE)

TEST_SUCCESS_RE = re.compile(r'test_.* ... ok')
TEST_FAILURES_RE = re.compile(r'test_.* ... (FAIL|ERROR)')

EXPECTED_FAILURE_RE = re.compile(r'(@unittest.expectedFailure)')

BONUS_RE = re.compile(r'/bonus(\d)_')


class Timer:
    """Context manager to time a code block."""
    def __enter__(self):
        self.start = perf_counter()
        return self
    def __exit__(self, *args):
        self.end = perf_counter()
        self.elapsed = self.end - self.start


@contextmanager
def tmp_copy(source, destination):
    assert not os.path.exists(destination)
    shutil.copy(source, destination)
    try:
        yield
    finally:
        os.remove(destination)


@contextmanager
def chdir(directory):
    cwd = os.getcwd()
    os.chdir(directory)
    try:
        yield
    finally:
        os.chdir(cwd)


@contextmanager
def expect_success(filename, count=1):
    with open(filename, mode='rt') as test_file:
        contents = test_file.read()
    if count:
        new_contents = EXPECTED_FAILURE_RE.sub(r'#\1', contents, count=count)
        with open(filename, mode='wt') as test_file:
            test_file.write(new_contents)
    try:
        yield
    finally:
        with open(filename, mode='wt') as test_file:
            test_file.write(contents)


def get_test_filenames(test_files):
    return sorted([
        filename
        for file_glob in test_files
        for filename in glob.glob(file_glob)
        if not filename.endswith('__')
    ])


def main(test_filename, test_files, pdb=False):
    module_name = TEST_FILENAME_RE.search(test_filename).group(1)
    if not test_files:
        test_files = [module_name + '/' + '*']

    print('Tests starting...')
    print()
    print('#' * 60)
    print()

    stats = {}
    for filename in get_test_filenames(test_files):
        print("SOLUTION", filename)
        print()
        if 'skip' in filename:
            print(f"{filename} skipped.")
            continue
        bonus_match = BONUS_RE.search(filename)
        bonus_count = int(bonus_match.group(1)) if bonus_match else 0
        new_test_filename = module_name + '/' + test_filename
        with tmp_copy(test_filename, new_test_filename):
            with tmp_copy(filename, module_name + '/' + module_name + '.py'):
                with expect_success(new_test_filename, count=bonus_count):
                    with chdir(module_name):
                        with Timer() as time:
                            if pdb:
                                process = subprocess.run(
                                    [sys.executable, test_filename],
                                    )
                            else:
                                process = subprocess.run(
                                    [sys.executable, test_filename],
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.STDOUT,
                                )
                                output = process.stdout.decode()
        if not pdb:
            print(output)
            successes = len(TEST_SUCCESS_RE.findall(output))
            failures = len(TEST_FAILURES_RE.findall(output))
            total = successes + failures
            stats[filename] = (successes, total)

        assert time.elapsed < 0.20
        print()

    if not pdb:
        for filename, (successes, total) in stats.items():
            if total == 0:
                print(f"{filename}: error")
            else:
                print(f"{filename}: {successes}/{total}")


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument('test_filename', metavar='TEST_FILE')
    parser.add_argument('solution_files', metavar='SOLUTION_FILES', nargs='*')
    parser.add_argument('-p', action='store_true')
    args = parser.parse_args()
    main(args.test_filename, args.solution_files, pdb=args.p)
